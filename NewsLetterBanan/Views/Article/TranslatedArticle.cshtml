@model Tuple<string, string, string, int>

@{
    var encodedContent = System.Web.HttpUtility.JavaScriptStringEncode(Model.Item1);
}
<div class="container mt-5">
    <h2 class="text-center mb-4">Translated Text</h2>

    <div class="alert alert-info">
        <strong>Article:</strong> <em>@Model.Item2</em><br>
        <strong>Translated to:</strong> <em>@Model.Item3</em>
    </div>

    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Translated Content</h5>
            <p class="card-text">@Model.Item1</p> <!-- Displaying translated text -->
        </div>
    </div>

    <p class="card-text">
        <!-- Updated button with POST implementation -->
        <button onclick="speakArticle(@Model.Item4, 'TranslatedArticle', '@encodedContent', this)">🔊</button>

        <button class="cancel-btn btn btn-danger btn-sm" style="display: none;" onclick="cancelSpeech(this)">X</button>
        <span class="spinner spinner-border spinner-border-sm" style="display: none;" role="status">
            <span class="visually-hidden">Loading...</span>
        </span>
    </p>

    <div class="mt-4 text-center">
        <a href="@Context.Request.Headers["Referer"]" class="btn btn-primary">Back to Articles/Article</a>
    </div>
</div>

<script>
    let currentAudio = null;

    async function speakArticle(articleId, source, content, button) {
        const spinner = button.nextElementSibling.nextElementSibling;
        const cancelButton = button.nextElementSibling;

        button.disabled = true;
        spinner.style.display = "inline-block";
        cancelButton.style.display = "inline-block";

        if (currentAudio) {
            currentAudio.pause();
            currentAudio = null;
        }

        try {
            const response = await fetch('/Article/SpeakArticle', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'audio/wav'
                },
                body: JSON.stringify({
                    id: articleId,
                    source: source,
                    content: content
                })
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const blob = await response.blob();
            currentAudio = new Audio(URL.createObjectURL(blob));

            currentAudio.oncanplaythrough = function () {
                spinner.style.display = "none";
                button.disabled = false;
                currentAudio.play();
            };

            currentAudio.onended = function () {
                cancelButton.style.display = "none";
            };

            currentAudio.onerror = function () {
                spinner.style.display = "none";
                button.disabled = false;
                cancelButton.style.display = "none";
                alert("Error playing audio.");
            };
        } catch (error) {
            console.error('Error:', error);
            spinner.style.display = "none";
            button.disabled = false;
            cancelButton.style.display = "none";
            alert("Failed to generate speech. Please try again.");
        }
    }

    function cancelSpeech(button) {
        if (currentAudio) {
            currentAudio.pause();
            currentAudio = null;
        }
        button.style.display = "none";
    }
</script>