@using Microsoft.AspNetCore.Mvc.Rendering
@model Article

@{
    bool isLoggedIn = ViewBag.IsLoggedIn ?? false; // Ensure this is passed from the backend
    var categories = ViewBag.Categories as List<NewsLetterBanan.Data.Category>;
}
<!-- Article Container (Full width on mobile, centered on larger screens) -->
<div class="article-container container-fluid px-3 px-md-5">
    <div class="card mb-4 shadow-sm">
        <div class="card-body">
            <!-- Article Headline -->
            <h3 class="card-title h5">@Model.Headline</h3>
            <!-- Author -->
            <p class="card-subtitle mb-2 text-muted small">By: @(Model.User != null ? $"{Model.User.FirstName} {Model.User.LastName}" : "Unknown Author")</p>
            <!-- Article Content -->
            <p class="card-text small">@Model.Content</p>
            <!-- Content Summary -->
            <p class="card-text small"><strong>Content Summary:</strong> @Model.ContentSummary</p>
            <!-- Category -->
            <p class="card-text small">
                <strong>Category:</strong>
                @if (Model.Categories != null && Model.Categories.Count == 1)

                {
                    @Model.Categories.First().Name
                }

                else if (Model.Categories != null && Model.Categories.Count > 1)

                {
                    @string.Join(", ", Model.Categories.Select(c => c.Name))
                }

                else

                {
                    <span>No Category</span>
                }
            </p>
            <!-- Category Description -->
            <p class="card-text small">
                <strong>Category Description:</strong>
                @if (Model.Categories != null && Model.Categories.Count == 1)

                {
                    @Model.Categories.First().Description
                }

                else if (Model.Categories != null && Model.Categories.Count > 1)

                {
                    @string.Join(", ", Model.Categories.Select(c => c.Description))
                }

                else

                {
                    <span>No Category Description</span>
                }
            </p>
            <!-- Tags -->
            <p class="card-text small">
                <strong>Tags:</strong>
                @if (Model.Tags != null && Model.Tags.Count == 1)

                {
                    @Model.Tags.First().TagName
                }

                else if (Model.Tags != null && Model.Tags.Count > 1)

                {
                    @string.Join(", ", Model.Tags.Select(t => t.TagName))
                }

                else

                {
                    <span>No Tags</span>
                }
            </p>
            <!-- Tag Descriptions -->
            <p class="card-text small">
                <strong>Tag Descriptions:</strong>
                @if (Model.Tags != null && Model.Tags.Count == 1)

                {
                    @Model.Tags.First().TagDescription
                }

                else if (Model.Tags != null && Model.Tags.Count > 1)

                {
                    @string.Join(", ", Model.Tags.Select(t => t.TagDescription))
                }

                else

                {
                    <span>No Tag Descriptions</span>
                }
            </p>

            <!-- Display Images -->
            @if (Model.Images != null && Model.Images.Any())
            {
                <div class="mt-3">
                    <strong class="small">Images:</strong>
                    <div class="row">
                        @foreach (var img in Model.Images)

                        {
                            <div class="col-12 mb-3">
                                <div class="card">
                                    <img src="@img.ImgSourceURL" class="card-img-top w-100" alt="@img.Title">
                                    <div class="card-body">
                                        <h5 class="card-title h6">@img.Title</h5>
                                        <p class="card-text small">@img.ImgDescription</p>
                                        <p class="card-text small"><small class="text-muted">Taken By: @img.TakenBy</small></p>
                                        <p class="card-text small"><small class="text-muted">License: @img.License</small></p>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }

            <!-- Published Date -->
            <p class="card-text small"><strong>Published Date:</strong> @Model.DateStamp.ToString("MMMM dd, yyyy")</p>
            <!-- Editor's Choice -->
            <p class="card-text small">
                <strong>Editor's Choice:</strong>
                <span class="badge @(Model.IsEditorsChoice ? "bg-success" : "bg-secondary")">
                    @(Model.IsEditorsChoice ? "Yes" : "No")
                </span>
            </p>
            <!-- Source URL -->
            <p class="card-text small"><strong>Source URL:</strong> <a href="@Model.SourceURL" target="_blank" class="text-break">@Model.SourceURL</a></p>
            <!-- Archived -->
            <p class="card-text small"><strong>Archived:</strong> @(Model.IsArchived ? "Yes" : "No")</p>
            <!-- Likes -->
            <p class="card-text small"><strong>Likes:</strong> @(ViewBag.LikeCounts.ContainsKey(Model.Id) ? ViewBag.LikeCounts[Model.Id] : 0)</p>
            <!-- Views -->
            <p class="card-text small"><strong>Views:</strong> @ViewBag.ViewCount</p>
            <!-- Like Article Button -->
            <form method="post" asp-action="LikeArticle" asp-controller="User" class="d-inline" onsubmit="checkLogin(event)" >
                <input type="hidden" name="articleId" value="@Model?.Id" />
                <button type="submit" class="btn btn-sm @(ViewBag.IsLiked != null && ViewBag.IsLiked.ContainsKey(Model?.Id ?? 0) ? "btn-danger" : "btn-outline-primary")">
                    <i class="fas fa-thumbs-up"></i>
                    @(ViewBag.IsLiked != null && ViewBag.IsLiked.ContainsKey(Model?.Id ?? 0) ? "Unlike" : "Like")
                </button>
            </form>

            <!-- Comment Count -->
            <p class="card-text small"><strong>Comments:</strong> @(ViewBag.CommentCounts.ContainsKey(Model.Id) ? ViewBag.CommentCounts[Model.Id] : 0)</p>

            <!-- Show Comments Button -->
            <button class="btn btn-sm btn-info toggle-comments" data-article-id="@Model.Id" @(ViewBag.CommentsOnOff == true ? "disabled" : "")>
                <i class="fas fa-comments"></i> Show Comments
            </button>

            @if (ViewBag.CommentsOnOff == true)
            {
                <p class="text-muted small">Comments are disabled for this article.</p>
            }
            else
            {
                <!-- Comments Section -->
                <div class="comments-section mt-3" id="comments-@Model.Id" style="display:none;">
                    <!-- Add Comment Form -->
                    <form method="post" asp-action="AddComment" asp-controller="User" class="comment-form mb-3"
                          onsubmit="checkLogin(event); saveOpenCommentBeforeSubmit('@Model.Id'); saveScrollPosition('@Model.Id');">
                        <input type="hidden" name="articleId" value="@Model.Id" />
                        <input type="hidden" name="source" value="GetAllArticles" />
                        <textarea name="content" class="form-control mb-2 small" placeholder="Write a comment..." required></textarea>
                        <button type="submit" class="btn btn-sm btn-success">Post Comment</button>
                    </form>

                    <!-- Comment List -->
                    @foreach (var comment in Model.Comments)
                    {
                        <div class="comment-item card mb-3" id="comment-@comment.Id">
                            <div class="card-body">
                                <!-- Comment Content -->
                                <p class="card-text small"><strong>Comment by:</strong> @(comment.User != null ? $"{comment.User.FirstName} {comment.User.LastName}" : "Anonymous")</p>
                                <p class="card-text small">@comment.Content</p>
                                <p class="card-text small"><small>Commented on: @comment.DateStamp.ToString("yyyy-MM-dd HH:mm")</small></p>
                                <!-- Comment Likes -->
                                <p class="card-text small"><strong>Likes:</strong> @(ViewBag.CommentLikeCounts.ContainsKey(comment.Id) ? ViewBag.CommentLikeCounts[comment.Id] : 0)</p>
                                <!-- Like Comment Button -->
                                <form method="post" asp-action="LikeComment" asp-controller="User" class="d-inline">
                                    <input type="hidden" name="commentId" value="@comment.Id" />
                                    <input type="hidden" name="source" value="GetAllArticles" />
                                    <button type="submit" class="btn btn-sm @(ViewBag.IsCommentLiked.ContainsKey(comment.Id) ? "btn-danger" : "btn-outline-primary")">
                                        üëç @(ViewBag.IsCommentLiked.ContainsKey(comment.Id) ? "Unlike" : "Like")
                                    </button>
                                </form>

                                <!-- Edit and Delete Buttons -->
                                @if (comment.UserId == ViewBag.UserId)

                                {
                                    <button class="btn btn-sm btn-primary edit-comment-btn" data-comment-id="@comment.Id">‚úè Edit</button>
                                    <form method="post" asp-action="DeleteComment" asp-controller="User" class="d-inline">
                                        <input type="hidden" name="commentId" value="@comment.Id" />
                                        <button type="submit" class="btn btn-sm btn-danger">üóë Delete</button>
                                    </form>
                                }

                                <!-- Update Comment Form -->
                                <form method="post" asp-action="UpdateComment" asp-controller="User" class="mt-2" id="update-form-@comment.Id" style="display: none;">

                                    <input type="hidden" name="commentId" value="@comment.Id" />
                                    <textarea name="newContent" class="form-control mb-2 small">@comment.Content</textarea>
                                    <button type="submit" class="btn btn-sm btn-success">‚úî Save</button>
                                </form>

                                <!-- Replies Section -->
                                <button class="btn btn-sm btn-info toggle-replies" data-comment-id="@comment.Id">
                                    <i class="fas fa-comments"></i> @(comment.Replies.Count) Replies
                                </button>
                                <div class="replies mt-3" id="replies-@comment.Id" style="display:none;">
                                    @foreach (var reply in comment.Replies)

                                    {
                                        <div class="reply-item card mb-2" id="reply-@reply.Id">
                                            <div class="card-body">
                                                <!-- Reply Content -->
                                                <p class="card-text small">@reply.Content</p>
                                                <p class="card-text small"><small>By: @(reply.User != null ? $"{reply.User.FirstName} {reply.User.LastName}" : "Anonymous") | @reply.DateStamp</small></p>
                                                <!-- Reply Likes -->
                                                <p class="card-text small"><strong>Likes:</strong> @(ViewBag.ReplyLikeCounts.ContainsKey(reply.Id) ? ViewBag.ReplyLikeCounts[reply.Id] : 0)</p>
                                                <!-- Like Reply Button -->
                                                <form method="post" asp-action="LikeReply" asp-controller="User" class="d-inline">
                                                    <input type="hidden" name="replyId" value="@reply.Id" />
                                                    <input type="hidden" name="source" value="GetAllArticles" />
                                                    <button type="submit" class="btn btn-sm @(ViewBag.IsReplyLiked.ContainsKey(reply.Id) ? "btn-danger" : "btn-outline-danger")">
                                                        üëç @(ViewBag.IsReplyLiked.ContainsKey(reply.Id) ? "Unlike" : "Like")
                                                    </button>
                                                </form>

                                                <!-- Edit and Delete Buttons for Reply -->
                                                @if (reply.UserId == ViewBag.UserId)

                                                {

                                                    <button class="btn btn-sm btn-primary edit-reply-btn" data-reply-id="@reply.Id">‚úè Edit</button>
                                                    <form method="post" asp-action="DeleteReply" asp-controller="User" class="d-inline">
                                                        <input type="hidden" name="replyId" value="@reply.Id" />
                                                        <button type="submit" class="btn btn-sm btn-danger">üóë Delete</button>
                                                    </form>
                                                }

                                                <!-- Update Reply Form -->
                                                <form method="post" asp-action="UpdateReply" asp-controller="User" class="update-reply-form mt-2" id="reply-update-form-@reply.Id" style="display: none;">
                                                    <input type="hidden" name="replyId" value="@reply.Id" />
                                                    <textarea name="newContent" class="form-control mb-2 small">@reply.Content</textarea>
                                                    <button type="submit" class="btn btn-sm btn-success">‚úî Save</button>
                                                </form>
                                            </div>
                                        </div>
                                    }

                                    <!-- Add Reply Form -->
                                    <form method="post" asp-action="AddReply" asp-controller="User" class="reply-form mt-3">
                                        <input type="hidden" name="commentId" value="@comment.Id" />
                                        <textarea name="content" class="form-control mb-2 small" placeholder="Write a reply..." required></textarea>
                                        <button type="submit" class="btn btn-sm btn-info">Reply</button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>


<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Ensure comments are always visible
        document.querySelectorAll(".comments").forEach(section => {
            section.style.display = "block"; // Force open comments
        });

        // Ensure comments remain open after reload
        document.querySelectorAll('.toggle-comments').forEach(button => {
            const articleId = button.getAttribute('data-article-id');
            const commentsSection = document.getElementById('comments-' + articleId);

            // Keep comments open based on stored state
            if (localStorage.getItem("openComments-" + articleId) === "true") {
                commentsSection.style.display = "block";
            }

            button.addEventListener('click', function () {
                const isOpen = commentsSection.style.display === "block";
                commentsSection.style.display = isOpen ? "none" : "block";

                // Save the state to localStorage
                localStorage.setItem("openComments-" + articleId, !isOpen ? "true" : "false");
            });
        });

        // Ensure replies remain open after reload
        document.querySelectorAll('.toggle-replies').forEach(button => {
            const commentId = button.getAttribute('data-comment-id');
            const replySection = document.getElementById('replies-' + commentId);

            // Keep replies open based on stored state
            if (localStorage.getItem("openReplies-" + commentId) === "true") {
                replySection.style.display = "block";
            }

            button.addEventListener('click', function () {
                const isOpen = replySection.style.display === "block";
                replySection.style.display = isOpen ? "none" : "block";

                // Save the state to localStorage
                localStorage.setItem("openReplies-" + commentId, !isOpen ? "true" : "false");
            });
        });

        // Prevent scrolling manipulation and reload instantly after form submission
        document.querySelectorAll("form").forEach(form => {
            form.addEventListener("submit", function (event) {
                event.preventDefault(); // Prevent default form submission

                // Save open comment and reply states before reload
                document.querySelectorAll('.toggle-comments').forEach(button => {
                    const articleId = button.getAttribute('data-article-id');
                    const commentsSection = document.getElementById('comments-' + articleId);
                    localStorage.setItem("openComments-" + articleId, commentsSection.style.display === "block" ? "true" : "false");
                });

                document.querySelectorAll('.toggle-replies').forEach(button => {
                    const commentId = button.getAttribute('data-comment-id');
                    const replySection = document.getElementById('replies-' + commentId);
                    localStorage.setItem("openReplies-" + commentId, replySection.style.display === "block" ? "true" : "false");
                });

                // Get form action and data
                const formData = new FormData(this);
                const actionUrl = this.action;
                const method = this.method.toUpperCase();

                // Use fetch to submit the form data asynchronously
                fetch(actionUrl, {
                    method: method,
                    body: formData,
                    headers: { "X-Requested-With": "XMLHttpRequest" }
                })
                    .then(response => {
                        if (!response.ok) throw new Error("Network error");
                        return response.text();
                    })
                    .then(() => {
                        location.reload(); // Reload instantly without scrolling adjustments
                    })
                    .catch(error => console.error("Form submission error:", error));
            });
        });

        // üî• Fix: Toggle edit form visibility using event delegation
        document.addEventListener("click", function (event) {
            // Edit Comment
            if (event.target.matches(".edit-comment-btn")) {
                const commentId = event.target.getAttribute("data-comment-id");
                const updateForm = document.getElementById("update-form-" + commentId);
                if (updateForm) {
                    updateForm.style.display = updateForm.style.display === "none" ? "block" : "none";
                }
            }

            // Edit Reply
            if (event.target.matches(".edit-reply-btn")) {
                const replyId = event.target.getAttribute("data-reply-id");
                const updateForm = document.getElementById("reply-update-form-" + replyId);
                if (updateForm) {
                    updateForm.style.display = updateForm.style.display === "none" ? "block" : "none";
                }
            }
        });

        // Login check before performing actions
        function checkLogin(event) {
            var isLoggedIn = @Json.Serialize(isLoggedIn);
            if (!isLoggedIn) {
                event.preventDefault();
                alert("You need to log in to perform this action!");
                return false;
            }
            return true;
        }

        // Apply login check to like, comment, reply, and delete forms
        document.querySelectorAll('.like-form, .comment-form, .reply-form, .delete-form').forEach(form => {
            form.onsubmit = checkLogin;
        });
    });


</script>
