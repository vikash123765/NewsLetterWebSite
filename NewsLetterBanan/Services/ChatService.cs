using System.Text;
using Azure.AI.OpenAI;
using Microsoft.Data.SqlClient;
using NewsLetterBanan.Services.Interfaces;
using OpenAI.Chat;

namespace NewsLetterBanan.Services
{
    public class ChatService : IChatService
    {
        private readonly IConfiguration _configuration;
        private readonly AzureOpenAIClient _aiClient;
        private readonly string _deploymentName;
        public ChatService(AzureOpenAIClient aiClient, IConfiguration configuration)
        {
            _aiClient = aiClient;
            _deploymentName = configuration["AzureOpenAI:DeploymentName"]!;
            _configuration = configuration;
        }
        public async Task<string> GetChatResponseAsync(string userMessage)
        {
            var chatMessages = new List<ChatMessage>
            {
                new SystemChatMessage("You are an AI assistant that helps people find information."),
                new UserChatMessage(userMessage)
            };
            // Create chat completion options

            var options = new ChatCompletionOptions
            {

                Temperature = (float)0.7,
                MaxOutputTokenCount = 800,
                TopP = (float)0.95,
                FrequencyPenalty = (float)0.8,
                PresencePenalty = (float)0
            };
            try
            {
                // Initialize the ChatClient with the specified deployment name
                ChatClient chatClient = _aiClient.GetChatClient("gpt-4o");
                // Create the chat completion request
                ChatCompletion completion = await chatClient.CompleteChatAsync(chatMessages, options);

                // Print the response
                if (completion != null)
                {
                    return completion.Content[0].Text;
                }
                else
                {
                    return "";
                }
            }
            catch (Exception ex)
            {
                return ex.Message;
            }
        }
        public async Task<string> ChatResponseConversation(List<(string, string)> messages)
        {
            var conversation = "";
            foreach (var message in messages)
            {
                conversation += message.Item1;
                conversation += message.Item2;
            }
            var chatMessages = new List<ChatMessage>
            {
                new SystemChatMessage("You are an AI assistant that helps people find information."),
                new UserChatMessage(conversation)
            };
            // Create chat completion options

            var options = new ChatCompletionOptions
            {

                Temperature = (float)0.7,
                MaxOutputTokenCount = 800,
                TopP = (float)0.95,
                FrequencyPenalty = (float)0.8,
                PresencePenalty = (float)0
            };
            try
            {
                // Initialize the ChatClient with the specified deployment name
                ChatClient chatClient = _aiClient.GetChatClient("gpt-4o");
                // Create the chat completion request
                ChatCompletion completion = await chatClient.CompleteChatAsync(chatMessages, options);

                // Print the response
                if (completion != null)
                {
                    return completion.Content[0].Text;
                }
                else
                {
                    return "";
                }
            }
            catch (Exception ex)
            {
                return ex.Message;
            }
        }
        public async Task<string> AdminChatResponse(List<(string, string)> chatHistory)
        {
            string userMessage = chatHistory[^1].Item2; // Get the latest admin message

            // Log the user's message for visibility
            Console.WriteLine($"Received User Message: {userMessage}");

            // Get the SQL query by passing the user query to OpenAI
            string sqlQuery = await GenerateSQLQueryFromAI(userMessage);

            if (string.IsNullOrEmpty(sqlQuery))
            {
                return "Sorry, I couldn't understand the request or generate a valid SQL query.";
            }

            // Log the raw SQL query generated by OpenAI before sanitization
            Console.WriteLine($"Generated SQL Query (Before Sanitization): {sqlQuery}");

            // Sanitize the SQL query to remove any unwanted characters
            sqlQuery = SanitizeSQLQuery(sqlQuery);

            // Log the sanitized SQL query before execution
            Console.WriteLine($"Sanitized SQL Query: {sqlQuery}");

            // Execute the sanitized query
            return await ExecuteSQLQuery(sqlQuery);
        }




        private async Task<string> GenerateSQLQueryFromAI(string userMessage)
        {
            var chatMessages = new List<ChatMessage>
    {
        new SystemChatMessage("You are an AI that translates natural language queries into SQL queries."),
        new UserChatMessage(userMessage)
    };

            var options = new ChatCompletionOptions
            {
                Temperature = 0.5f, // Lower temperature for more deterministic answers
                MaxOutputTokenCount = 500,
                TopP = 1.0f,
                FrequencyPenalty = 0.0f,
                PresencePenalty = 0.0f
            };

            try
            {
                Console.WriteLine($"Sending to OpenAI: {userMessage}"); // Log user input

                ChatClient chatClient = _aiClient.GetChatClient(_deploymentName);
                ChatCompletion completion = await chatClient.CompleteChatAsync(chatMessages, options);

                if (completion != null)
                {
                    string sqlQuery = completion.Content[0].Text?.Trim();
                    Console.WriteLine($"Received SQL Query from OpenAI: {sqlQuery}"); // Log the SQL generated by OpenAI

                    // Clean up the query to ensure no unwanted characters are included
                    sqlQuery = sqlQuery.Replace("[[[sql", "").Replace("]]]", "").Trim();

                    return sqlQuery;
                }
                else
                {
                    return string.Empty;
                }
            }
            catch (Exception ex)
            {
                return $"Error: {ex.Message}";
            }
        }


        // Sanitize the SQL query to ensure it is compatible with SQL Server

        // Sanitize the SQL query to ensure it is compatible with SQL Server
        private string SanitizeSQLQuery(string sqlQuery)
        {
            // Log the raw SQL query before sanitizing
            Console.WriteLine($"Sanitizing SQL Query (Before Sanitization): {sqlQuery}");

            sqlQuery = sqlQuery.Replace("[[[sql", "")
                       .Replace("]]]", "")
                       .Replace("```", "") // Also remove backticks if any are present
                       .Replace("sql", "")
                       .Trim(); // Trim extra whitespace or newline characters

            // Log after sanitizing to verify it's clean
            Console.WriteLine($"Sanitized SQL Query: {sqlQuery}");

            return sqlQuery;
        }





        // Executes the SQL query and returns the result
        private async Task<string> ExecuteSQLQuery(string sanitizedQuery)
        {
            string connectionString = _configuration.GetConnectionString("DefaultConnection");

            // Log the actual SQL query that will be executed
            Console.WriteLine($"Executing SQL Query: {sanitizedQuery}");

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                await connection.OpenAsync();

                using (SqlCommand command = new SqlCommand(sanitizedQuery, connection))
                {
                    using (SqlDataReader reader = await command.ExecuteReaderAsync())
                    {
                        if (!reader.HasRows) return "No records found.";

                        StringBuilder results = new StringBuilder();
                        while (await reader.ReadAsync())
                        {
                            string row = "";
                            for (int i = 0; i < reader.FieldCount; i++)
                            {
                                row += $"{reader.GetName(i)}: {reader[i]} | ";
                            }
                            results.AppendLine(row);
                        }

                        return results.ToString();
                    }
                }
            }
        }


    }

}